{"ast":null,"code":"import { addInventory, deleteInventory, getInventory, getPlaces, initializeApp, updateInventory } from \"../api/api\";\nconst SET_DATA = 'SET-DATA';\nconst SET_PLACES_HIERARCHY = 'SET_PLACES_HIERARCHY';\nconst SET_VIEWING_PLACE = 'SET-VIEWING-PLACE';\nconst initialState = {\n  places: [],\n  inventory: [],\n  placesData: [],\n  viewingPlaceId: undefined,\n  viewingPlaceName: undefined,\n  inventoryPlaces: []\n};\n\nlet reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DATA:\n      {\n        let copyState = { ...state,\n          places: [...action.places],\n          inventory: [...action.inventory]\n        };\n        return copyState;\n      }\n\n    case SET_PLACES_HIERARCHY:\n      {\n        let copyState = { ...state,\n          placesData: action.placesData,\n          inventoryPlaces: action.inventoryPlaces\n        };\n        return copyState;\n      }\n\n    case SET_VIEWING_PLACE:\n      {\n        let copyState = { ...state,\n          viewingPlaceId: action.placeId,\n          viewingPlaceName: action.placeName\n        };\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setData = (places, inventory) => {\n  return {\n    type: SET_DATA,\n    places,\n    inventory\n  };\n};\nexport const setViewingPlace = (placeId, placeName) => {\n  return {\n    type: SET_VIEWING_PLACE,\n    placeId,\n    placeName\n  };\n};\nexport const setPlacesHierarchy = (placesData, inventoryPlaces) => {\n  return {\n    type: SET_PLACES_HIERARCHY,\n    placesData,\n    inventoryPlaces\n  };\n};\nexport const getDataThunkCreator = () => {\n  return async dispatch => {\n    initializeApp();\n    let places = await getPlaces();\n    let inventory = await getInventory();\n    dispatch(setData(places, inventory));\n  };\n};\nexport const addInventoryThunkCreator = (name, count, placeId) => {\n  return async dispatch => {\n    await addInventory(name, count, placeId);\n  };\n};\nexport const deleteInventoryThunkCreator = inventoryId => {\n  return async dispatch => {\n    await deleteInventory(inventoryId);\n  };\n};\nexport const editInventoryThunkCreator = (inventoryId, count) => {\n  return async dispatch => {\n    await updateInventory(inventoryId, count);\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["C:/Users/nigga/Desktop/прога/new-schema/src/redux/reducer.js"],"names":["addInventory","deleteInventory","getInventory","getPlaces","initializeApp","updateInventory","SET_DATA","SET_PLACES_HIERARCHY","SET_VIEWING_PLACE","initialState","places","inventory","placesData","viewingPlaceId","undefined","viewingPlaceName","inventoryPlaces","reducer","state","action","type","copyState","placeId","placeName","setData","setViewingPlace","setPlacesHierarchy","getDataThunkCreator","dispatch","addInventoryThunkCreator","name","count","deleteInventoryThunkCreator","inventoryId","editInventoryThunkCreator"],"mappings":"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","sourcesContent":["import {addInventory, deleteInventory, getInventory, getPlaces, initializeApp, updateInventory} from \"../api/api\";\r\n\r\nconst SET_DATA = 'SET-DATA'\r\nconst SET_PLACES_HIERARCHY = 'SET_PLACES_HIERARCHY'\r\nconst SET_VIEWING_PLACE = 'SET-VIEWING-PLACE'\r\n\r\n\r\nconst initialState = {\r\n    places: [],\r\n    inventory: [],\r\n    placesData: [],\r\n    viewingPlaceId: undefined,\r\n    viewingPlaceName: undefined,\r\n    inventoryPlaces: []\r\n}\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_DATA: {\r\n            let copyState = {\r\n                ...state,\r\n                places: [...action.places],\r\n                inventory: [...action.inventory]\r\n            }\r\n            return copyState\r\n        }\r\n        case SET_PLACES_HIERARCHY: {\r\n            let copyState = {\r\n                ...state,\r\n                placesData: action.placesData,\r\n                inventoryPlaces: action.inventoryPlaces\r\n            }\r\n            return copyState\r\n        }\r\n        case SET_VIEWING_PLACE: {\r\n            let copyState = {\r\n                ...state,\r\n                viewingPlaceId: action.placeId,\r\n                viewingPlaceName: action.placeName\r\n            }\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\nexport const setData = (places, inventory) => {\r\n    return {\r\n        type: SET_DATA,\r\n        places,\r\n        inventory\r\n    }\r\n}\r\nexport const setViewingPlace = (placeId, placeName) => {\r\n    return {\r\n        type: SET_VIEWING_PLACE,\r\n        placeId,\r\n        placeName\r\n    }\r\n}\r\nexport const setPlacesHierarchy = (placesData, inventoryPlaces) => {\r\n    return {\r\n        type: SET_PLACES_HIERARCHY,\r\n        placesData,\r\n        inventoryPlaces,\r\n    }\r\n}\r\n\r\nexport const getDataThunkCreator = () => {\r\n    return async (dispatch) => {\r\n        initializeApp()\r\n        let places = await getPlaces()\r\n        let inventory = await getInventory()\r\n        dispatch(setData(places, inventory))\r\n    }\r\n}\r\nexport const addInventoryThunkCreator = (name, count, placeId) => {\r\n    return async (dispatch) => {\r\n        await addInventory(name, count, placeId)\r\n    }\r\n}\r\nexport const deleteInventoryThunkCreator = (inventoryId) => {\r\n    return async (dispatch) => {\r\n        await deleteInventory(inventoryId)\r\n    }\r\n}\r\nexport const editInventoryThunkCreator = (inventoryId, count) => {\r\n    return async (dispatch) => {\r\n        await updateInventory(inventoryId, count)\r\n    }\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}